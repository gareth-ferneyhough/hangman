swagger: "2.0"
info:
  version: "0.0.1"
  title: Hangman
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
  - application/octet-stream
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /game:
    x-swagger-router-controller: game
    post:
      operationId: createGame
      summary: Create a new game
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/CreateGameResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      operationId: getAllGames
      summary: Get state of all games
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetGameListResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /{game_id}:
    x-swagger-router-controller: game
    patch:
      operationId: updateGame
      summary: Play a turn by guessing one letter
      parameters:
        - name: game_id
          in: path
          required: true
          type: string
          description: id of the game
        - name: guess
          in: query
          type: string
          description: letter to guess
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/GameState"

        400:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      operationId: getOneGame
      summary: Get game state
      parameters:
        - name: game_id
          in: path
          type: string
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GameState"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /movie:
    # our controller name
    x-swagger-router-controller: movie
    get:
      operationId: getAll
      description: get the movies list
      # define the type of response for Success "200" and Error
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetMoviesListResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      operationId: save
      description: add a new movie to the list
      # movie info to be stored
      parameters:
        - name: title
          description: Movie properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/Movie"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GeneralResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /movie/{id}:
    # our controller name
    x-swagger-router-controller: movie
    get:
      operationId: getOne
      description: get a movie
      # define the type of response for Success "200" and Error
      parameters:
        - name: id
          type: string
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetMovieResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      operationId: update
      description: update a movie
      # define the parameters
      parameters:
        - name: id
          description: Movie id
          type: string
          in: path
          required: true
        - name: title
          description: Movie properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/Movie"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GeneralResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      operationId: delMovie
      description: delete a movie
      # define the parameters
      parameters:
        - name: id
          description: Movie id
          type: string
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GeneralResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  CreateGameResponse:
    required:
      - game_id
      - number_of_letters
    properties:
      game_id:
        type: string
        description: unique identifier that represents the newly created game
      number_of_letters:
        type: integer
        description: number of letters in the game that the user must guess
  GameState:
    required:
      - game_id
      - guesses_remaining
      - state
    properties:
        game_id:
          type: integer
        guesses_remaining:
          type: integer
          description: number of guesses remaining before the game ends in a failed state
        state:
          type: string
          description: String representing the state of the game. Known letters are represented appropriately; unknown letters are represented as underscores.
  GetGameListResponse:
    required:
      - games
    properties:
      # The array of games
      games:
        type: array
        items:
          type: object
          properties:
            game_id:
              type: string
            guess_remaining:
              type: integer
            state:
              type: string
  GetMoviesListResponse:
      required:
        - movies
      properties:
        # The array of movies
        movies:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              title:
                type: string
              year:
                type: number
  GetMovieResponse:
    required:
      - id
      - title
      - year
    properties:
      id:
        type: string
      title:
        type: string
      year:
        type: number
  Movie:
    type: object
    properties:
      title:
        type: string
        description: task object name
      year:
        type: number
        description: task description
    required:
      - title
      - year
  GeneralResponse:
    type: object
    properties:
      success:
        type: number
        description: returns 1 if successful
      description:
        type: string
        description: a short comment
    required:
      - success
      - description
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
